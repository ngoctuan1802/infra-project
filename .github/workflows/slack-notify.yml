name: Slack Notification

on:
  workflow_call:
    inputs:
      status:
        required: true
        type: string
        description: 'Job status (success/failure/cancelled)'
      stage:
        required: true
        type: string
        description: 'Stage name (e.g., Terraform Plan)'
      environment:
        required: true
        type: string
        description: 'Environment (e.g., staging, production)'
      repository:
        required: true
        type: string
      actor:
        required: true
        type: string
      run_url:
        required: true
        type: string
      summary_file:
        required: false
        type: string
        default: ''
        description: 'Path to log file to include in notification'
    secrets:
      SLACK_WEBHOOK_URL:
        required: true

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts (if summary file specified)
        if: inputs.summary_file != ''
        uses: actions/download-artifact@v4
        with:
          name: logs
          path: ./logs
        continue-on-error: true

      - name: Build Slack message payload
        id: build_payload
        shell: bash
        run: |
          STATUS="${{ inputs.status }}"
          case "$STATUS" in
            success) ICON=":white_check_mark:"; COLOR="good"; TEXT_STATUS="Success";;
            failure) ICON=":x:"; COLOR="danger"; TEXT_STATUS="Failed";;
            cancelled) ICON=":warning:"; COLOR="warning"; TEXT_STATUS="Cancelled";;
            *) ICON=":grey_question:"; COLOR="#808080"; TEXT_STATUS="Unknown";;
          esac

          if [ -n "${{ inputs.summary_file }}" ] && [ -f "${{ inputs.summary_file }}" ]; then
            SUMMARY_RAW=$(tail -n 20 "${{ inputs.summary_file }}" | head -c 2000)
            SUMMARY_TEXT="```\n${SUMMARY_RAW}\n```"
          else
            SUMMARY_TEXT="(No log summary available)"
          fi

          jq -n \
            --arg icon "$ICON" \
            --arg stage "${{ inputs.stage }}" \
            --arg env "${{ inputs.environment }}" \
            --arg text_status "$TEXT_STATUS" \
            --arg color "$COLOR" \
            --arg repo "${{ inputs.repository }}" \
            --arg actor "${{ inputs.actor }}" \
            --arg run_url "${{ inputs.run_url }}" \
            --arg summary "$SUMMARY_TEXT" \
            '{
              text: "\($icon) *\($stage)* on *\($env)* â€” *\($text_status)*",
              attachments: [
                {
                  color: $color,
                  fields: [
                    {title: "Repository", value: $repo, short: true},
                    {title: "Triggered by", value: $actor, short: true},
                    {title: "Environment", value: $env, short: true},
                    {title: "Status", value: $text_status, short: true},
                    {title: "Workflow Run", value: "<\($run_url)|View Details>", short: false}
                  ]
                },
                {
                  color: "#36a64f",
                  title: "Last 20 lines of log:",
                  text: $summary,
                  mrkdwn_in: ["text"]
                }
              ]
            }' > slack_payload.json

          echo "Generated Slack payload:"
          cat slack_payload.json | jq .

      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload-file-path: slack_payload.json
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}