name: Terraform Actions
on:
  workflow_dispatch:
    inputs:
      action:
        description: "Select Terraform action"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy
      environment:
        description: "Select environment to deploy"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod
      confirm:
        description: "Type 'YES' to confirm destroy"
        required: false

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
       
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5
       
      # ‚úÖ OIDC authentication
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::491085416582:role/GitHubActions-Role
          aws-region: us-east-2
                 
      # ‚úÖ Set working directory based on environment
      - name: Set environment variables
        run: |
          ENV="${{ github.event.inputs.environment }}"
          echo "TF_ENV=${ENV}" >> $GITHUB_ENV
          echo "TF_WORKING_DIR=terraform/environments/${ENV}" >> $GITHUB_ENV
          echo "üìÅ Working directory: terraform/environments/${ENV}"
          
          # Set backend bucket per environment
          if [ "$ENV" = "prod" ]; then
            echo "TF_BACKEND_BUCKET=my-prod-tfstate" >> $GITHUB_ENV
          elif [ "$ENV" = "staging" ]; then
            echo "TF_BACKEND_BUCKET=my-staging-tfstate" >> $GITHUB_ENV
          else
            echo "TF_BACKEND_BUCKET=my-dev-tfstate" >> $GITHUB_ENV
          fi
       
      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -backend-config="bucket=${TF_BACKEND_BUCKET}"
       
      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate
       
      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          if [ "${{ github.event.inputs.action }}" = "destroy" ]; then
            terraform plan -destroy -no-color -out=tfplan
          else
            terraform plan -no-color -out=tfplan
          fi
       
      - name: Save Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform show -no-color tfplan | tee terraform-plan.log
       
      - name: Upload Plan Artifact
        if: github.event.inputs.action != 'plan'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ env.TF_ENV }}
          path: ${{ env.TF_WORKING_DIR }}/tfplan
          retention-days: 5
       
      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve tfplan
       
      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "YES" ]; then
            echo "‚ùå Destroy cancelled: please type 'YES' to confirm."
            exit 1
          fi
          echo "‚ö†Ô∏è  Destroying infrastructure in ${{ env.TF_ENV }} environment..."
          terraform apply -auto-approve tfplan
       
      - name: Comment Plan Output (Optional)
        if: github.event.inputs.action == 'plan'
        run: |
          echo "‚úÖ Terraform plan completed for ${{ env.TF_ENV }} environment"
          echo "Review the plan above before running apply"
          
  slack-notify:
    name: Notify Slack
    needs: terraform
    if: always()
    uses: ./.github/workflows/slack-notify.yml
    with:
      status: ${{ needs.terraform.result }}  # ‚úÖ S·ª≠a l·∫°i ƒë√∫ng job name
      stage: "AWS OIDC Test"
      environment: "staging"
      repository: ${{ github.repository }}
      actor: ${{ github.actor }}
      run_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      summary_file: aws-identity.log  # File n√†y s·∫Ω ƒë∆∞·ª£c download t·ª´ artifact
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}


